{"ast":null,"code":"var _jsxFileName = \"/Users/nghiale/Desktop/Study/WebDevelopment/Codecademy/projects/10.appointment_planner_new/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  /*\r\n  Define state variables for\r\n  contact info and duplicate check\r\n  */\n\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  useEffect(() => {\n    const duplicate = props.contact.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n    setIsDuplicate(duplicate);\n  }, [name, props.contact]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!isDuplicate && name && phoneNumber && email) {\n      props.addContact(name, phoneNumber, email);\n      setName(\"\");\n      setPhoneNumber(\"\");\n      setEmail(\"\");\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the\r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Add Contact \", isDuplicate && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: \" - Name already exists!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phoneNumber,\n        setPhone: setPhoneNumber,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: props.contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n};\n_s(ContactsPage, \"oCJ9soiLihtwrz1g4uB9Royetyo=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","name","setName","phoneNumber","setPhoneNumber","email","setEmail","isDuplicate","setIsDuplicate","duplicate","contact","some","toLowerCase","handleSubmit","e","preventDefault","addContact","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","phone","setPhone","tiles","_c","$RefreshReg$"],"sources":["/Users/nghiale/Desktop/Study/WebDevelopment/Codecademy/projects/10.appointment_planner_new/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for\r\n  contact info and duplicate check\r\n  */\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const duplicate = props.contact.some(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    setIsDuplicate(duplicate);\r\n  }, [name, props.contact]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!isDuplicate && name && phoneNumber && email) {\r\n      props.addContact(name, phoneNumber, email);\r\n      setName(\"\");\r\n      setPhoneNumber(\"\");\r\n      setEmail(\"\");\r\n    }\r\n\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the\r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n      <div>\r\n        <section>\r\n          <h2>\r\n            Add Contact {isDuplicate && <span style={{ color: \"red\" }}> - Name already exists!</span>}\r\n          </h2>\r\n          <ContactForm\r\n            name={name}\r\n            setName={setName}\r\n            phone={phoneNumber}\r\n            setPhone={setPhoneNumber}\r\n            email={email}\r\n            setEmail={setEmail}\r\n            handleSubmit={handleSubmit}\r\n          />\r\n        </section>\r\n        <hr />\r\n        <section>\r\n          <h2>Contacts</h2>\r\n          <TileList tiles={props.contact} />\r\n        </section>\r\n      </div>\r\n    );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}